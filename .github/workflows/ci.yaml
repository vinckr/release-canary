name: CI Tasks for Ory Hydra
on:
  push:
    branches:
      - main
      - master
    tags:
      - '*'
  pull_request:

jobs:
  test:
    name: Run tests and lints
    runs-on: ubuntu-latest
    if: ${{ github.ref_type == 'tag' }}
    steps:
      - run: echo 'ok'
      # - uses: actions/checkout@v2
      # - uses: actions/setup-go@v2
      #   with:
      #     go-version: ^1.13
      # - run: go list -json > go.list
      # - name: Run nancy
      #   uses: sonatype-nexus-community/nancy-github-action@v1.0.2
      # - name: Run prettier
      #   uses: ory/ci/prettier@master
      # - name: Run prettier (docs)
      #   uses: ory/ci/prettier@master
      #   with:
      #     dir: docs
      # - name: Run golangci-lint
      #   uses: golangci/golangci-lint-action@v2
      #   env:
      #     GOGC: 100
      #   with:
      #     args: --timeout 10m0s --issues-exit-code=0
      #     skip-go-installation: true
      #     skip-pkg-cache: true
      # - run: |
      #     make .bin/go-acc
      #     .bin/go-acc -o coverage.out ./... -- -failfast -timeout=20m -tags sqlite
      # - run: |
      #     bash <(curl -s https://codecov.io/bash)
      #   env:
      #     CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}

  test-hsm:
    name: Run HSM tests
    runs-on: ubuntu-latest
    if: ${{ github.ref_type == 'tag' }}
    env:
      HSM_ENABLED: true
      HSM_LIBRARY: /usr/lib/softhsm/libsofthsm2.so
      HSM_TOKEN_LABEL: hydra
      HSM_PIN: 1234
    steps:
      - run: echo 'ok'
        # - uses: actions/checkout@v2
        # - uses: actions/setup-go@v2
        #   with:
        #     go-version: ^1.17
        # - run: |
        #     sudo apt install -y softhsm opensc
        #     sudo rm -rf /var/lib/softhsm/tokens
        #     sudo mkdir -p /var/lib/softhsm/tokens
        #     sudo chmod -R a+rwx /var/lib/softhsm
        #     sudo chmod a+rx /etc/softhsm
        #     sudo chmod a+r /etc/softhsm/*
        #     pkcs11-tool --module /usr/lib/softhsm/libsofthsm2.so --slot 0 --init-token --so-pin 0000 --init-pin --pin 1234 --label hydra
        #     go test -p 1 -v -failfast -short -timeout=20m -tags=sqlite,hsm ./...

  setup-e2e:
    name: Setup end-to-end tests
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-go@v2
        with:
          go-version: ^1.16
      - run: go build -tags sqlite -o test/e2e/hydra .
      - uses: actions/cache@v2
        with:
          path: ./test/e2e/hydra
          key: ${{ runner.os }}-hydra

  test-e2e:
    name: Run end-to-end tests
    runs-on: ubuntu-latest
    needs:
      - setup-e2e
    strategy:
      matrix:
        database: ['memory', 'postgres', 'mysql', 'cockroach']
        args: ['', '--jwt']
    services:
      postgres:
        image: postgres:9.6
        env:
          POSTGRES_DB: postgres
          POSTGRES_PASSWORD: test
          POSTGRES_USER: test
        ports:
          - 5432:5432
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: test
        ports:
          - 3306:3306
    env:
      TEST_DATABASE_POSTGRESQL: "postgres://test:test@localhost:5432/postgres?sslmode=disable"
      TEST_DATABASE_MYSQL: "mysql://root:test@(localhost:3306)/mysql?multiStatements=true&parseTime=true"
      TEST_DATABASE_COCKROACHDB: "cockroach://root@localhost:26257/defaultdb?sslmode=disable"
      SKIP_HYDRA_BUILD: 1
    steps:
      - run: |
          docker create --name cockroach -p 26257:26257 \
            cockroachdb/cockroach:v20.2.5 start-single-node --insecure
          docker start cockroach
        name: Start CockroachDB
      - uses: actions/checkout@v2
      - uses: actions/setup-go@v2
        with:
          go-version: ^1.16
      - uses: actions/cache@v2
        with:
          path: ./test/e2e/hydra
          key: ${{ runner.os }}-hydra
      - run: ./test/e2e/circle-ci.bash ${{ matrix.database }} ${{ matrix.args }}

  docs-build:
    runs-on: ubuntu-latest
    name: Build and publish docs
    if: ${{ github.ref_type == 'tag' || github.ref_name == 'master' }}
    needs:
      - test
    steps:
      - run: echo 'ok'
      # - uses: ory/ci/docs/build@master
      #   with:
      #     token: ${{ secrets.PAT }}
      #     swag-spec-location: spec/api.json

  docs-cli:
    runs-on: ubuntu-latest
    name: Build CLI docs
    needs:
      - test
    steps:
      - run: echo 'ok'
        # - uses: ory/ci/docs/cli@master
        #   with:
        #     token: ${{ secrets.PAT }}

  changelog:
    name: Generate changelog
    runs-on: ubuntu-latest
    if: ${{ github.ref_type == 'tag' || github.ref_name == 'master' }}
    needs:
      - test
      - test-hsm
      - test-e2e
      - docs-build
    steps:
      - run: echo 'ok'
        # - uses: actions/checkout@v2
        #   with:
        #     fetch-depth: 0
        # - uses: ory/ci/changelog@master
        #   with:
        #     token: ${{ secrets.PAT }}

  sdk-generate:
    name: Generate SDKs
    runs-on: ubuntu-latest
    if: ${{ github.ref_type == 'tag' || github.ref_name != 'master' }}
    needs:
      - test
      - test-hsm
      - test-e2e
    steps:
      - run: echo 'ok'
        # - uses: ory/ci/sdk/generate@master
        #   with:
        #     token: ${{ secrets.PAT }}
        #     app-name: Ory_Hydra
        #     swag-spec-ignore: internal/httpclient gopkg.in/square/go-jose.v2
        #     swag-spec-location: spec/api.json

  sdk-release:
    name: Release SDKs
    runs-on: ubuntu-latest
    if: ${{ github.ref_type == 'tag' }}
    needs:
      - test
      - test-hsm
      - sdk-generate
      - docs-build
      - release
    steps:
      - run: echo 'ok'
      # - uses: ory/ci/sdk/release@master
      #   with:
      #     token: ${{ secrets.PAT }}
      #     app-name: Ory_Hydra
      #     swag-spec-ignore: internal/httpclient gopkg.in/square/go-jose.v2
      #     swag-spec-location: spec/api.json

  release:
    name: Generate release
    runs-on: ubuntu-latest
    if: ${{ github.ref_type == 'tag' }}
    needs:
      - test
      - test-hsm
      - test-e2e
      - changelog
      - docs-build
    steps:
      - run: echo 'ok'
      # - uses: ory/ci/releaser@master
      #   with:
      #     token: ${{ secrets.PAT }}
      #     goreleaser_key: ${{ secrets.GORELEASER_KEY }}
      #     cosign_pwd: ${{ secrets.COSIGN_PWD }}
      #     docker_username: ${{ secrets.DOCKERHUB_USERNAME }}
      #     docker_password: ${{ secrets.DOCKERHUB_PASSWORD }}

  render-version-schema:
    name: Render version schema
    runs-on: ubuntu-latest
    if: ${{ github.ref_type == 'tag' }}
    needs:
      - release
    steps:
      - run: echo 'ok'
      # - uses: ory/ci/releaser/render-version-schema@master
      #   with:
      #     schema-path: spec/config.json

  newsletter-draft:
    name: Draft newsletter
    runs-on: ubuntu-latest
    if: ${{ github.ref_type == 'tag' }}
    needs:
      - release
    steps:
      - uses: ory/ci/newsletter@master
        with:
          mailchimp_list_id: 058a056618
          mailchmip_segment_id: 11398953
          mailchimp_api_key: ${{ secrets.MAILCHIMP_API_KEY }}
          draft: 'true'
          ssh_key: ${{ secrets.SSH_KEY }}


  slack-approval-notification:
    name: Pending approval Slack notification
    runs-on: ubuntu-latest
    if: ${{ github.ref_type == 'tag' || github.ref_name == 'master' }}
    steps:
      - uses: ory/ci/newsletter/slack-notify@master
        with:
          slack-webhook-url: ${{ secrets.SLACK_WEBHOOK_URL }}

  newsletter-send:
    name: Send newsletter
    runs-on: ubuntu-latest
    needs:
      - newsletter-draft
    if: ${{ github.ref_type == 'tag' }}
    environment: production
    steps:
      - uses: ory/ci/newsletter@master
        with:
          mailchimp_list_id: 058a056618
          mailchmip_segment_id: 11398953
          mailchimp_api_key: ${{ secrets.MAILCHIMP_API_KEY }}
          draft: 'false'
          ssh_key: ${{ secrets.SSH_KEY }}
