// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// TrustJwtGrantIssuerBody trust jwt grant issuer body
//
// swagger:model trustJwtGrantIssuerBody
type TrustJwtGrantIssuerBody struct {

	// The "expires_at" indicates, when grant will expire, so we will reject assertion from "issuer" targeting "subject".
	// Required: true
	// Format: date-time
	ExpiresAt *strfmt.DateTime `json:"expires_at"`

	// The "issuer" identifies the principal that issued the JWT assertion (same as "iss" claim in JWT).
	// Required: true
	Issuer *string `json:"issuer"`

	// jwk
	// Required: true
	Jwk *JSONWebKey `json:"jwk"`

	// The "scope" contains list of scope values (as described in Section 3.3 of OAuth 2.0 [RFC6749])
	// Required: true
	Scope []string `json:"scope"`

	// The "subject" identifies the principal that is the subject of the JWT.
	// Required: true
	Subject *string `json:"subject"`
}

// Validate validates this trust jwt grant issuer body
func (m *TrustJwtGrantIssuerBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateExpiresAt(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIssuer(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateJwk(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateScope(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSubject(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *TrustJwtGrantIssuerBody) validateExpiresAt(formats strfmt.Registry) error {

	if err := validate.Required("expires_at", "body", m.ExpiresAt); err != nil {
		return err
	}

	if err := validate.FormatOf("expires_at", "body", "date-time", m.ExpiresAt.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *TrustJwtGrantIssuerBody) validateIssuer(formats strfmt.Registry) error {

	if err := validate.Required("issuer", "body", m.Issuer); err != nil {
		return err
	}

	return nil
}

func (m *TrustJwtGrantIssuerBody) validateJwk(formats strfmt.Registry) error {

	if err := validate.Required("jwk", "body", m.Jwk); err != nil {
		return err
	}

	if m.Jwk != nil {
		if err := m.Jwk.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("jwk")
			}
			return err
		}
	}

	return nil
}

func (m *TrustJwtGrantIssuerBody) validateScope(formats strfmt.Registry) error {

	if err := validate.Required("scope", "body", m.Scope); err != nil {
		return err
	}

	return nil
}

func (m *TrustJwtGrantIssuerBody) validateSubject(formats strfmt.Registry) error {

	if err := validate.Required("subject", "body", m.Subject); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *TrustJwtGrantIssuerBody) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *TrustJwtGrantIssuerBody) UnmarshalBinary(b []byte) error {
	var res TrustJwtGrantIssuerBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
